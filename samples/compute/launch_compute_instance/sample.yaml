---
- name: Check pre-requisites
  fail:
    msg: " {{item}} 환경 변수가 설정되지 않음. 샘플이 작동하기에 적절한 값을 가진 환경 변수를 선언하라."
  when: item not in ansible_env
  with_items:
    - "SAMPLE_COMPARTMENT_OCID"
    - "SAMPLE_IMAGE_OCID"
    - "SAMPLE_AD_NAME"

- block:
  - name: Create a temporary directory to house a temporary SSH keypair we will later use to connect to instance
    tempfile:
      state: directory
      suffix: cert
    register: result
  - set_fact:
      temp_certificates_path: "{{ result.path }}"
  - name: Generate a Private Key
    openssl_privatekey:
      path: "{{ temp_certificates_path }}/private_key.pem"
      type: RSA
      size: 2048
  - set_fact:
      my_test_public_key: "{{ temp_certificates_path }}/public_key.pem"
  - name: Generate a Public Key
    openssl_publickey:
      path: "{{ my_test_public_key }}"
      privatekey_path: "{{ temp_certificates_path }}/private_key.pem"
      format: OpenSSH
  when: "'SAMPLE_PUBLIC_SSH_KEY' not in ansible_env"

- name: Create a VCN
  oci_network_vcn:
    compartment_id: "{{ instance_compartment }}"
    display_name: "{{ vcn_name }}"
    cidr_block: "{{ vcn_cidr_block }}"
    dns_label: "{{ vcn_dns_label }}"
  register: result
- set_fact:
    vcn_id: "{{ result.vcn.id }}"

- name: Create a new Internet Gateway
  oci_network_internet_gateway:
    compartment_id: "{{ instance_compartment }}"
    vcn_id: "{{ vcn_id }}"
    name: "{{ ig_name }}"
    is_enabled: 'yes'
    state: 'present'
  register: result
- set_fact:
    ig_id: "{{ result.internet_gateway.id }}"

- name: Create route table to connect internet gateway to the VCN
  oci_network_route_table:
    compartment_id: "{{ instance_compartment }}"
    vcn_id: "{{ vcn_id }}"
    name: "{{ route_table_name }}"
    route_rules: "{{ route_table_rules }}"
    state: 'present'
  register: result
- set_fact:
    rt_id: "{{ result.route_table.id }}"

# 공용 인스턴스에 대한 액세스를 허용하는 보안 목록 만들기
# 수신 및 송신 보안 규칙의 jinja2 템플릿을 사용하여 최종 규칙의 템플릿 버전을 생성합니다.
- name: ceate ingress rules yaml body
  template: src=./templates/ingress_security_rules.yaml.j2 dest=/tmp/instance_ingress_security_rules.yaml
- name: create egress yaml body
  template: src=./templates/egress_security_rules.yaml.j2 dest=/tmp/instance_egress_security_rules.yaml
- name: load the variables defined in the ingress rules yaml body
  include_vars:
    file: /tmp/instance_ingress_security_rules.yaml
    name: loaded_ingress
- name: print loaded_ingress
  debug:
    msg: "loaded ingress is {{loaded_ingress}}"
- name: load the variables defined in the egress rules yaml body
  include_vars:
    file: /tmp/instance_egress_security_rules.yaml
    name: loaded_egress
- name: print loaded_egress
  debug:
    msg: "loaded egress is {{loaded_egress}}"
- name: Create a security list for allowing access to public instance
  oci_network_security_list:
    name: "{{ securitylist_name }}"
    compartment_id: "{{ instance_compartment }}"
    vcn_id: '{{ vcn_id }}'
    ingress_security_rules: "{{ loaded_ingress.instance_ingress_security_rules }}"
    egress_security_rules:  "{{ loaded_egress.instance_egress_security_rules }}"
  register: result
- set_fact:
    instance_security_list_ocid: "{{ result.security_list.id }}"

- name: Create a subnet to host the public instance. Link security_list and route_table.
  oci_network_subnet:
    availability_domain: "{{ instance_ad }}"
    cidr_block: "{{ subnet_cidr }}"
    compartment_id: "{{ instance_compartment }}"
    display_name: "{{ subnet_name }}"
    prohibit_public_ip_on_vnic: false
    route_table_id: "{{ rt_id }}"
    security_list_ids: [ "{{ instance_security_list_ocid }}" ]
    vcn_id: '{{ vcn_id }}'
    dns_label: "{{ subnet_dns_label }}"
  register: result
- set_fact:
    instance_subnet_id: "{{ result.subnet.id }}"