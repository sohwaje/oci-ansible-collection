---
# Copyright (c) 2020, 2021 Oracle and/or its affiliates.
# This software is made available to you under the terms of the GPL 3.0 license or the Apache 2.0 license.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Apache License v2.0
# See LICENSE.TXT for details.

# - name: Check pre-requisites
#   fail:
#     msg: "Environment variable {{item}} not set. Please declare an environment variable with an appropriate value for the sample to work."
#   when: item not in ansible_env
#   with_items:
#     - "SAMPLE_COMPARTMENT_OCID"
#     - "SAMPLE_IMAGE_OCID"
#     - "SAMPLE_AD_NAME"
- block:
  - name: 임시 SSH 키 쌍을 저장할 임시 디렉터리 만들기
    tempfile:
      state: directory
      suffix: cert
    register: result
  - set_fact:
      temp_certificates_path: "{{ result.path }}"
  - name: 프라이빗 키 생성
    openssl_privatekey:
      path: "{{ temp_certificates_path }}/private_key.pem"
      type: RSA
      size: 2048
  - set_fact:
      my_test_public_key: "{{ temp_certificates_path }}/public_key.pem"
  - name: 퍼블릭 키 생성
    openssl_publickey:
      path: "{{ my_test_public_key }}"
      privatekey_path: "{{ temp_certificates_path }}/private_key.pem"
      format: OpenSSH
  when: "'SAMPLE_PUBLIC_SSH_KEY' not in ansible_env"

- name: VCN 생성
  oci_network_vcn:
    compartment_id: "{{ instance_compartment }}"
    display_name: "{{ vcn_name }}"
    cidr_block: "{{ vcn_cidr_block }}"
    dns_label: "{{ vcn_dns_label }}"
  register: result
- set_fact:
    vcn_id: "{{ result.vcn.id }}"

- name: 인터넷 게이트웨이 생성
  oci_network_internet_gateway:
    compartment_id: "{{ instance_compartment }}"
    vcn_id: "{{ vcn_id }}"
    name: "{{ ig_name }}"
    is_enabled: 'yes'
    state: 'present'
  register: result
- set_fact:
    ig_id: "{{ result.internet_gateway.id }}"

- name: VCN에 연결할 인터넷 게이트웨이 경로 테이블 생성
  oci_network_route_table:
    compartment_id: "{{ instance_compartment }}"
    vcn_id: "{{ vcn_id }}"
    name: "{{ route_table_name }}"
    route_rules: "{{ route_table_rules }}"
    state: 'present'
  register: result
- set_fact:
    rt_id: "{{ result.route_table.id }}"

# 공용 인스턴스에 액세스를 허용하는 보안 목록 만들기
# 수신 및 송신 보안 규칙의 jinja2 템플릿 사용
- name: 수신 규칙 본문 yaml 작성
  template: src=./templates/ingress_security_rules.yaml.j2 dest=/tmp/instance_ingress_security_rules.yaml
- name: 송신 규칙 본문 yaml 작성
  template: src=./templates/egress_security_rules.yaml.j2 dest=/tmp/instance_egress_security_rules.yaml
# Load the variables defined in the generated files
- name: 수신 규칙 본문에 정의된 변수를 불러온다.
  include_vars:
    file: /tmp/instance_ingress_security_rules.yaml
    name: loaded_ingress
- name: 불러온 수신 규칙 출력
  debug:
    msg: "loaded ingress is {{loaded_ingress}}"
- name: 송신 규칙 본문에 정의된 변수를 불러온다.
  include_vars:
    file: /tmp/instance_egress_security_rules.yaml
    name: loaded_egress
- name: 불러온 송신 규칙을 출력
  debug:
    msg: "loaded egress is {{loaded_egress}}"
- name: 퍼블릭 인스턴스로의 접속을 허용하는 보안 목록 생성
  oci_network_security_list:
    name: "{{ securitylist_name }}"
    compartment_id: "{{ instance_compartment }}"
    vcn_id: '{{ vcn_id }}'
    ingress_security_rules: "{{ loaded_ingress.instance_ingress_security_rules }}"
    egress_security_rules:  "{{ loaded_egress.instance_egress_security_rules }}"
  register: result
- set_fact:
    instance_security_list_ocid: "{{ result.security_list.id }}"

- name: 공용 인스턴스를 호스트할 서브넷 생성 => 보안 목록 및 라우트 테이블 연결
  oci_network_subnet:
    availability_domain: "{{ instance_ad }}"
    cidr_block: "{{ subnet_cidr }}"
    compartment_id: "{{ instance_compartment }}"
    display_name: "{{ subnet_name }}"
    prohibit_public_ip_on_vnic: false
    route_table_id: "{{ rt_id }}"
    security_list_ids: [ "{{ instance_security_list_ocid }}" ]
    vcn_id: '{{ vcn_id }}'
    dns_label: "{{ subnet_dns_label }}"
  register: result
- set_fact:
    instance_subnet_id: "{{ result.subnet.id }}"