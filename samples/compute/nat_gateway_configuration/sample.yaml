---
# Copyright (c) 2020, 2021 Oracle and/or its affiliates.
# This software is made available to you under the terms of the GPL 3.0 license or the Apache 2.0 license.
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
# Apache License v2.0
# See LICENSE.TXT for details.

- name: Launch a private compute instance and connect to internet via NAT Gateway
  hosts: localhost
  collections:
    - oracle.oci
  vars:
    # common networking definitions
    quad_zero_route: "0.0.0.0/0"
    TCP_protocol: "6"
    SSH_port: "22"

    vcn_name: "vcn01"
    vcn_cidr_block: "10.0.0.0/16"

    ng_name: "natgw01"

    private_subnet_cidr: "10.0.3.0/24"
    public_subnet_cidr: "10.0.0.0/24"

    private_subnet_name: "private subnet03"

    private_subnet_securitylist_name: "SSH to Server"

    private_subnet_route_table_name: "ngw route table"
    #  프라이빗 서브넷에서 NAT 게이트웨이로 모든 인터넷 접근이 라우트된다.
    private_subnet_route_table_rules:
        - cidr_block: "{{ quad_zero_route }}"
          network_entity_id: "{{ ng_id }}"

    private_subnet_instance_name: "privatedb"

    instance_shape: "{{ lookup('env', 'SAMPLE_INSTANCE_SHAPE') | default('VM.Standard.E2.1', true) }}"
    private_subnet_instance_hostname: "privatedb"

    # 사용자 계정명 "opc"
    ssh_user: "opc"
    ssh_disable_strict_host_key_checking_args: '-o "UserKnownHostsFile=/dev/null" -o "StrictHostKeyChecking=no"'
    ssh_credentials_arg: "-i {{ temp_certificates_path }}/private_key.pem"

    #########################################
    # Tenancy specific configuration
    # *Note* - Override the following variables based on your tenancy
    # or set a valid value for the corresponding environment variable
    #########################################
    instance_ad: "" 
    instance_compartment: "instance_compartment"
    instance_image: "instance_image"

  tasks:
    - block:
      - import_tasks: setup.yaml

      # #==========================================================================================

      # - name: Wait (upto 10 minutes) for ssh to start in public instance
      #   wait_for:
      #     port: 22
      #     host: '{{ public_instance_public_ip }}'
      #     state: started
      #     delay: 10
      #     timeout: 600
      #   vars:
      #     ansible_connection: local

      # #==========================================================================================

      # - name: Wait (upto 5 minutes) for ssh to start in private instance
      #   command: 'ssh {{ ssh_disable_strict_host_key_checking_args }} {{ ssh_credentials_arg }} -o ProxyCommand="ssh {{ ssh_disable_strict_host_key_checking_args }} {{ ssh_credentials_arg }} -W %h:%p -q {{ ssh_user }}@{{ public_instance_public_ip }}" {{ ssh_user }}@{{ private_instance_private_ip }} uname -a'
      #   register: result
      #   until: result.rc == 0
      #   retries: 10
      #   delay: 30

      # - name: Print sample SSH invocation to test if internet access is available in the private instance
      #   debug:
      #     msg: 'ssh {{ ssh_disable_strict_host_key_checking_args }} {{ ssh_credentials_arg }} -o ProxyCommand="ssh {{ ssh_disable_strict_host_key_checking_args }} {{ ssh_credentials_arg }} -W %h:%p -q {{ ssh_user }}@{{ public_instance_public_ip }}" {{ ssh_user }}@{{ private_instance_private_ip }} ping -c2 oracle.com'

      # #==========================================================================================

      # - name: Check internet access from private instance
      #   command: 'ssh {{ ssh_disable_strict_host_key_checking_args }} {{ ssh_credentials_arg }} -o ProxyCommand="ssh {{ ssh_disable_strict_host_key_checking_args }} {{ ssh_credentials_arg }} -W %h:%p -q {{ ssh_user }}@{{ public_instance_public_ip }}" {{ ssh_user }}@{{ private_instance_private_ip }} ping -c2 oracle.com'
      #   register: result

      # - name: Print ping response from the private instance
      #   debug:
      #     msg: "{{ result.stdout_lines }}"

      # #==========================================================================================

      # 리소스 삭제 플레이북
      # - import_tasks: teardown.yaml

      # rescue:
      #   - import_tasks: teardown.yaml
      #     ignore_errors: yes

        # - fail:
        #     msg: "{{ ansible_failed_result }}"
